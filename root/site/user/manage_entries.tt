[% page.load_scripts_at_top = 1 %]
	
<div id="div_table"></div>
<script type="text/javascript">
YUI().use( "datasource-io", "datasource-jsonschema", "datatable-datasource", function (Y) {
	
    var cols = [ 
		  {key:"entryid", label:'ID'}, 
		  {key:"title", label:"Title"}, 
		  {key:"created_at", label:'Created At'}, 
		  {key:"published", label:'Published'},
      {key:"reply_count", label:'Replies'}
    ];
		
    var ds = new Y.DataSource.IO( { 
        source:"[% c.uri_for_action('/user/manage_entries', [ c.user.name ] ) %]",
        ioConfig: {
          headers: {
            'Accept': 'application/json'
          }
        }
        
    })
        .plug(Y.Plugin.DataSourceJSONSchema, {
            schema: {
                resultListLocator: "data_table",
                resultFields: [ "entryid", "title", "created_at", "published", "reply_count" ]
            }
        });
		
    var dt = new Y.DataTable({
    	columns: 	cols, 
    	caption:	"Entries"
    }).plug(
    	Y.Plugin.DataTableDataSource, {
    		datasource:	ds, 
      	initialRequest:""
    	});
		

   ds.after("response", function() {
        dt.render("#div_table")}
	 ); 
 

		
 /* 
  An alternative technique to load remote data "initially" is to define 
  the "initialRequest" in DataTableDataSource (commented out above), 
  remove the above .render and .load method calls 
  
  AND then to do the following ...
 
  ds.after("response", function() {
        dt.render("#div_table")}
	 ); 
 
 */

});

</script>
